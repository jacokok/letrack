/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * letrack-api
 * OpenAPI spec version: v1
 */
import { createQuery } from "@tanstack/svelte-query";
import type {
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	QueryFunction,
	QueryKey
} from "@tanstack/svelte-query";
import type { InternalErrorResponse, RaceSummaryResponse } from "./api.schemas";
import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType } from "../mutator/customInstance.svelte";

export const raceSummary = (raceId: number) => {
	return customInstance<RaceSummaryResponse>({ url: `/race/summary/${raceId}`, method: "GET" });
};

export const getRaceSummaryQueryKey = (raceId: number) => {
	return [`/race/summary/${raceId}`] as const;
};

export const getRaceSummaryQueryOptions = <
	TData = Awaited<ReturnType<typeof raceSummary>>,
	TError = ErrorType<InternalErrorResponse>
>(
	raceId: number,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof raceSummary>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getRaceSummaryQueryKey(raceId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof raceSummary>>> = () => raceSummary(raceId);

	return { queryKey, queryFn, enabled: !!raceId, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof raceSummary>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type RaceSummaryQueryResult = NonNullable<Awaited<ReturnType<typeof raceSummary>>>;
export type RaceSummaryQueryError = ErrorType<InternalErrorResponse>;

export function createRaceSummary<
	TData = Awaited<ReturnType<typeof raceSummary>>,
	TError = ErrorType<InternalErrorResponse>
>(
	raceId: number,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof raceSummary>>, TError, TData>>;
	}
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getRaceSummaryQueryOptions(raceId, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
