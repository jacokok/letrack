/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * letrack-api
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	MutationFunction,
	QueryFunction,
	QueryKey
} from "@tanstack/svelte-query";
import type {
	EntitiesRace,
	InternalErrorResponse,
	RaceInsertRequest,
	RaceSummaryResponse
} from "./api.schemas";
import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const raceSummary = (raceId: number) => {
	return customInstance<RaceSummaryResponse>({ url: `/race/summary/${raceId}`, method: "GET" });
};

export const getRaceSummaryQueryKey = (raceId: number) => {
	return [`/race/summary/${raceId}`] as const;
};

export const getRaceSummaryQueryOptions = <
	TData = Awaited<ReturnType<typeof raceSummary>>,
	TError = ErrorType<InternalErrorResponse>
>(
	raceId: number,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof raceSummary>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getRaceSummaryQueryKey(raceId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof raceSummary>>> = () => raceSummary(raceId);

	return { queryKey, queryFn, enabled: !!raceId, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof raceSummary>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData> };
};

export type RaceSummaryQueryResult = NonNullable<Awaited<ReturnType<typeof raceSummary>>>;
export type RaceSummaryQueryError = ErrorType<InternalErrorResponse>;

export function createRaceSummary<
	TData = Awaited<ReturnType<typeof raceSummary>>,
	TError = ErrorType<InternalErrorResponse>
>(
	raceId: number,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof raceSummary>>, TError, TData>>;
	}
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getRaceSummaryQueryOptions(raceId, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const raceInsert = (raceInsertRequest: BodyType<RaceInsertRequest>) => {
	return customInstance<EntitiesRace>({
		url: `/race`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: raceInsertRequest
	});
};

export const getRaceInsertMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof raceInsert>>,
		TError,
		{ data: BodyType<RaceInsertRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof raceInsert>>,
	TError,
	{ data: BodyType<RaceInsertRequest> },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof raceInsert>>,
		{ data: BodyType<RaceInsertRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return raceInsert(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type RaceInsertMutationResult = NonNullable<Awaited<ReturnType<typeof raceInsert>>>;
export type RaceInsertMutationBody = BodyType<RaceInsertRequest>;
export type RaceInsertMutationError = ErrorType<InternalErrorResponse>;

export const createRaceInsert = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof raceInsert>>,
		TError,
		{ data: BodyType<RaceInsertRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<typeof raceInsert>>,
	TError,
	{ data: BodyType<RaceInsertRequest> },
	TContext
> => {
	const mutationOptions = getRaceInsertMutationOptions(options);

	return createMutation(mutationOptions);
};
