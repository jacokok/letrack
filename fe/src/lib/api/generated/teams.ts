/**
 * Generated by orval v7.4.0 üç∫
 * Do not edit manually.
 * letrack-api
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	MutationFunction,
	QueryFunction,
	QueryKey
} from "@tanstack/svelte-query";
import type {
	EntitiesTeam,
	InternalErrorResponse,
	TeamsInsertRequest,
	TeamsUpdateRequest
} from "./api.schemas";
import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const teamsUpdate = (teamsUpdateRequest: BodyType<TeamsUpdateRequest>) => {
	return customInstance<EntitiesTeam>({
		url: `/teams`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: teamsUpdateRequest
	});
};

export const getTeamsUpdateMutationOptions = <
	TData = Awaited<ReturnType<typeof teamsUpdate>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { data: BodyType<TeamsUpdateRequest> }, TContext>;
}) => {
	const mutationKey = ["teamsUpdate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof teamsUpdate>>,
		{ data: BodyType<TeamsUpdateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return teamsUpdate(data);
	};

	return { mutationFn, ...mutationOptions } as CreateMutationOptions<
		TData,
		TError,
		{ data: BodyType<TeamsUpdateRequest> },
		TContext
	>;
};

export type TeamsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof teamsUpdate>>>;
export type TeamsUpdateMutationBody = BodyType<TeamsUpdateRequest>;
export type TeamsUpdateMutationError = ErrorType<InternalErrorResponse>;

export const createTeamsUpdate = <
	TData = Awaited<ReturnType<typeof teamsUpdate>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { data: BodyType<TeamsUpdateRequest> }, TContext>;
}): CreateMutationResult<TData, TError, { data: BodyType<TeamsUpdateRequest> }, TContext> => {
	const mutationOptions = getTeamsUpdateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const teamsList = () => {
	return customInstance<EntitiesTeam[]>({ url: `/teams`, method: "GET" });
};

export const getTeamsListQueryKey = () => {
	return [`/teams`] as const;
};

export const getTeamsListQueryOptions = <
	TData = Awaited<ReturnType<typeof teamsList>>,
	TError = ErrorType<InternalErrorResponse>
>(options?: {
	query?: Partial<CreateQueryOptions<TData, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getTeamsListQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof teamsList>>> = () => teamsList();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<TData, TError, TData> & {
		queryKey: DataTag<QueryKey, TData>;
	};
};

export type TeamsListQueryResult = NonNullable<Awaited<ReturnType<typeof teamsList>>>;
export type TeamsListQueryError = ErrorType<InternalErrorResponse>;

export function createTeamsList<
	TData = Awaited<ReturnType<typeof teamsList>>,
	TError = ErrorType<InternalErrorResponse>
>(options?: {
	query?: Partial<CreateQueryOptions<TData, TError, TData>>;
}): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getTeamsListQueryOptions(options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const teamsInsert = (teamsInsertRequest: BodyType<TeamsInsertRequest>) => {
	return customInstance<EntitiesTeam>({
		url: `/teams`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: teamsInsertRequest
	});
};

export const getTeamsInsertMutationOptions = <
	TData = Awaited<ReturnType<typeof teamsInsert>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { data: BodyType<TeamsInsertRequest> }, TContext>;
}) => {
	const mutationKey = ["teamsInsert"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof teamsInsert>>,
		{ data: BodyType<TeamsInsertRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return teamsInsert(data);
	};

	return { mutationFn, ...mutationOptions } as CreateMutationOptions<
		TData,
		TError,
		{ data: BodyType<TeamsInsertRequest> },
		TContext
	>;
};

export type TeamsInsertMutationResult = NonNullable<Awaited<ReturnType<typeof teamsInsert>>>;
export type TeamsInsertMutationBody = BodyType<TeamsInsertRequest>;
export type TeamsInsertMutationError = ErrorType<InternalErrorResponse>;

export const createTeamsInsert = <
	TData = Awaited<ReturnType<typeof teamsInsert>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { data: BodyType<TeamsInsertRequest> }, TContext>;
}): CreateMutationResult<TData, TError, { data: BodyType<TeamsInsertRequest> }, TContext> => {
	const mutationOptions = getTeamsInsertMutationOptions(options);

	return createMutation(mutationOptions);
};
export const teamsDelete = (id: number) => {
	return customInstance<void>({ url: `/teams/${id}`, method: "DELETE" });
};

export const getTeamsDeleteMutationOptions = <
	TData = Awaited<ReturnType<typeof teamsDelete>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { id: number }, TContext>;
}) => {
	const mutationKey = ["teamsDelete"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof teamsDelete>>, { id: number }> = (
		props
	) => {
		const { id } = props ?? {};

		return teamsDelete(id);
	};

	return { mutationFn, ...mutationOptions } as CreateMutationOptions<
		TData,
		TError,
		{ id: number },
		TContext
	>;
};

export type TeamsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof teamsDelete>>>;

export type TeamsDeleteMutationError = ErrorType<InternalErrorResponse>;

export const createTeamsDelete = <
	TData = Awaited<ReturnType<typeof teamsDelete>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { id: number }, TContext>;
}): CreateMutationResult<TData, TError, { id: number }, TContext> => {
	const mutationOptions = getTeamsDeleteMutationOptions(options);

	return createMutation(mutationOptions);
};
