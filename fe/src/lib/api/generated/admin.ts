/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * letrack-api
 * OpenAPI spec version: v1
 */
import { createMutation } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	MutationFunction
} from "@tanstack/svelte-query";
import type { InternalErrorResponse } from "./api.schemas";
import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType } from "../mutator/customInstance.svelte";

export const adminClearRaces = () => {
	return customInstance<boolean>({ url: `/admin/clear-race`, method: "POST" });
};

export const getAdminClearRacesMutationOptions = <
	TData = Awaited<ReturnType<typeof adminClearRaces>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, void, TContext>;
}) => {
	const mutationKey = ["adminClearRaces"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof adminClearRaces>>, void> = () => {
		return adminClearRaces();
	};

	return { mutationFn, ...mutationOptions } as CreateMutationOptions<TData, TError, void, TContext>;
};

export type AdminClearRacesMutationResult = NonNullable<
	Awaited<ReturnType<typeof adminClearRaces>>
>;

export type AdminClearRacesMutationError = ErrorType<InternalErrorResponse>;

export const createAdminClearRaces = <
	TData = Awaited<ReturnType<typeof adminClearRaces>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, void, TContext>;
}): CreateMutationResult<TData, TError, void, TContext> => {
	const mutationOptions = getAdminClearRacesMutationOptions(options);

	return createMutation(mutationOptions);
};
export const adminClearLaps = () => {
	return customInstance<boolean>({ url: `/admin/clear-laps`, method: "POST" });
};

export const getAdminClearLapsMutationOptions = <
	TData = Awaited<ReturnType<typeof adminClearLaps>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, void, TContext>;
}) => {
	const mutationKey = ["adminClearLaps"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof adminClearLaps>>, void> = () => {
		return adminClearLaps();
	};

	return { mutationFn, ...mutationOptions } as CreateMutationOptions<TData, TError, void, TContext>;
};

export type AdminClearLapsMutationResult = NonNullable<Awaited<ReturnType<typeof adminClearLaps>>>;

export type AdminClearLapsMutationError = ErrorType<InternalErrorResponse>;

export const createAdminClearLaps = <
	TData = Awaited<ReturnType<typeof adminClearLaps>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, void, TContext>;
}): CreateMutationResult<TData, TError, void, TContext> => {
	const mutationOptions = getAdminClearLapsMutationOptions(options);

	return createMutation(mutationOptions);
};
export const adminClearInvalidLaps = () => {
	return customInstance<boolean>({ url: `/admin/clear-invalid-laps`, method: "POST" });
};

export const getAdminClearInvalidLapsMutationOptions = <
	TData = Awaited<ReturnType<typeof adminClearInvalidLaps>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, void, TContext>;
}) => {
	const mutationKey = ["adminClearInvalidLaps"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof adminClearInvalidLaps>>,
		void
	> = () => {
		return adminClearInvalidLaps();
	};

	return { mutationFn, ...mutationOptions } as CreateMutationOptions<TData, TError, void, TContext>;
};

export type AdminClearInvalidLapsMutationResult = NonNullable<
	Awaited<ReturnType<typeof adminClearInvalidLaps>>
>;

export type AdminClearInvalidLapsMutationError = ErrorType<InternalErrorResponse>;

export const createAdminClearInvalidLaps = <
	TData = Awaited<ReturnType<typeof adminClearInvalidLaps>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, void, TContext>;
}): CreateMutationResult<TData, TError, void, TContext> => {
	const mutationOptions = getAdminClearInvalidLapsMutationOptions(options);

	return createMutation(mutationOptions);
};
export const adminClearEvents = () => {
	return customInstance<boolean>({ url: `/admin/clear-events`, method: "POST" });
};

export const getAdminClearEventsMutationOptions = <
	TData = Awaited<ReturnType<typeof adminClearEvents>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, void, TContext>;
}) => {
	const mutationKey = ["adminClearEvents"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof adminClearEvents>>, void> = () => {
		return adminClearEvents();
	};

	return { mutationFn, ...mutationOptions } as CreateMutationOptions<TData, TError, void, TContext>;
};

export type AdminClearEventsMutationResult = NonNullable<
	Awaited<ReturnType<typeof adminClearEvents>>
>;

export type AdminClearEventsMutationError = ErrorType<InternalErrorResponse>;

export const createAdminClearEvents = <
	TData = Awaited<ReturnType<typeof adminClearEvents>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, void, TContext>;
}): CreateMutationResult<TData, TError, void, TContext> => {
	const mutationOptions = getAdminClearEventsMutationOptions(options);

	return createMutation(mutationOptions);
};
export const adminClearAll = () => {
	return customInstance<boolean>({ url: `/admin/clear-all`, method: "POST" });
};

export const getAdminClearAllMutationOptions = <
	TData = Awaited<ReturnType<typeof adminClearAll>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, void, TContext>;
}) => {
	const mutationKey = ["adminClearAll"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof adminClearAll>>, void> = () => {
		return adminClearAll();
	};

	return { mutationFn, ...mutationOptions } as CreateMutationOptions<TData, TError, void, TContext>;
};

export type AdminClearAllMutationResult = NonNullable<Awaited<ReturnType<typeof adminClearAll>>>;

export type AdminClearAllMutationError = ErrorType<InternalErrorResponse>;

export const createAdminClearAll = <
	TData = Awaited<ReturnType<typeof adminClearAll>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, void, TContext>;
}): CreateMutationResult<TData, TError, void, TContext> => {
	const mutationOptions = getAdminClearAllMutationOptions(options);

	return createMutation(mutationOptions);
};
