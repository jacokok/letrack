/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * letrack-api
 * OpenAPI spec version: v1
 */
import { createMutation } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	MutationFunction,
	QueryClient
} from "@tanstack/svelte-query";

import type { InternalErrorResponse } from "./api.schemas";

import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType } from "../mutator/customInstance.svelte";

export const adminSnapshot = () => {
	return customInstance<boolean>({ url: `/admin/snapshot`, method: "POST" });
};

export const getAdminSnapshotMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof adminSnapshot>>,
		TError,
		void,
		TContext
	>;
}): CreateMutationOptions<Awaited<ReturnType<typeof adminSnapshot>>, TError, void, TContext> => {
	const mutationKey = ["adminSnapshot"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof adminSnapshot>>, void> = () => {
		return adminSnapshot();
	};

	return { mutationFn, ...mutationOptions };
};

export type AdminSnapshotMutationResult = NonNullable<Awaited<ReturnType<typeof adminSnapshot>>>;

export type AdminSnapshotMutationError = ErrorType<InternalErrorResponse>;

export const createAdminSnapshot = <TError = ErrorType<InternalErrorResponse>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof adminSnapshot>>,
			TError,
			void,
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<Awaited<ReturnType<typeof adminSnapshot>>, TError, void, TContext> => {
	const mutationOptions = getAdminSnapshotMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const adminClearRaces = () => {
	return customInstance<boolean>({ url: `/admin/clear-race`, method: "POST" });
};

export const getAdminClearRacesMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof adminClearRaces>>,
		TError,
		void,
		TContext
	>;
}): CreateMutationOptions<Awaited<ReturnType<typeof adminClearRaces>>, TError, void, TContext> => {
	const mutationKey = ["adminClearRaces"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof adminClearRaces>>, void> = () => {
		return adminClearRaces();
	};

	return { mutationFn, ...mutationOptions };
};

export type AdminClearRacesMutationResult = NonNullable<
	Awaited<ReturnType<typeof adminClearRaces>>
>;

export type AdminClearRacesMutationError = ErrorType<InternalErrorResponse>;

export const createAdminClearRaces = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof adminClearRaces>>,
			TError,
			void,
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<Awaited<ReturnType<typeof adminClearRaces>>, TError, void, TContext> => {
	const mutationOptions = getAdminClearRacesMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const adminClearLaps = () => {
	return customInstance<boolean>({ url: `/admin/clear-laps`, method: "POST" });
};

export const getAdminClearLapsMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof adminClearLaps>>,
		TError,
		void,
		TContext
	>;
}): CreateMutationOptions<Awaited<ReturnType<typeof adminClearLaps>>, TError, void, TContext> => {
	const mutationKey = ["adminClearLaps"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof adminClearLaps>>, void> = () => {
		return adminClearLaps();
	};

	return { mutationFn, ...mutationOptions };
};

export type AdminClearLapsMutationResult = NonNullable<Awaited<ReturnType<typeof adminClearLaps>>>;

export type AdminClearLapsMutationError = ErrorType<InternalErrorResponse>;

export const createAdminClearLaps = <TError = ErrorType<InternalErrorResponse>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof adminClearLaps>>,
			TError,
			void,
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<Awaited<ReturnType<typeof adminClearLaps>>, TError, void, TContext> => {
	const mutationOptions = getAdminClearLapsMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const adminClearInvalidLaps = () => {
	return customInstance<boolean>({ url: `/admin/clear-invalid-laps`, method: "POST" });
};

export const getAdminClearInvalidLapsMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof adminClearInvalidLaps>>,
		TError,
		void,
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof adminClearInvalidLaps>>,
	TError,
	void,
	TContext
> => {
	const mutationKey = ["adminClearInvalidLaps"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof adminClearInvalidLaps>>,
		void
	> = () => {
		return adminClearInvalidLaps();
	};

	return { mutationFn, ...mutationOptions };
};

export type AdminClearInvalidLapsMutationResult = NonNullable<
	Awaited<ReturnType<typeof adminClearInvalidLaps>>
>;

export type AdminClearInvalidLapsMutationError = ErrorType<InternalErrorResponse>;

export const createAdminClearInvalidLaps = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof adminClearInvalidLaps>>,
			TError,
			void,
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<
	Awaited<ReturnType<typeof adminClearInvalidLaps>>,
	TError,
	void,
	TContext
> => {
	const mutationOptions = getAdminClearInvalidLapsMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const adminClearEvents = () => {
	return customInstance<boolean>({ url: `/admin/clear-events`, method: "POST" });
};

export const getAdminClearEventsMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof adminClearEvents>>,
		TError,
		void,
		TContext
	>;
}): CreateMutationOptions<Awaited<ReturnType<typeof adminClearEvents>>, TError, void, TContext> => {
	const mutationKey = ["adminClearEvents"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof adminClearEvents>>, void> = () => {
		return adminClearEvents();
	};

	return { mutationFn, ...mutationOptions };
};

export type AdminClearEventsMutationResult = NonNullable<
	Awaited<ReturnType<typeof adminClearEvents>>
>;

export type AdminClearEventsMutationError = ErrorType<InternalErrorResponse>;

export const createAdminClearEvents = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof adminClearEvents>>,
			TError,
			void,
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<Awaited<ReturnType<typeof adminClearEvents>>, TError, void, TContext> => {
	const mutationOptions = getAdminClearEventsMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
export const adminClearAll = () => {
	return customInstance<boolean>({ url: `/admin/clear-all`, method: "POST" });
};

export const getAdminClearAllMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof adminClearAll>>,
		TError,
		void,
		TContext
	>;
}): CreateMutationOptions<Awaited<ReturnType<typeof adminClearAll>>, TError, void, TContext> => {
	const mutationKey = ["adminClearAll"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof adminClearAll>>, void> = () => {
		return adminClearAll();
	};

	return { mutationFn, ...mutationOptions };
};

export type AdminClearAllMutationResult = NonNullable<Awaited<ReturnType<typeof adminClearAll>>>;

export type AdminClearAllMutationError = ErrorType<InternalErrorResponse>;

export const createAdminClearAll = <TError = ErrorType<InternalErrorResponse>, TContext = unknown>(
	options?: {
		mutation?: CreateMutationOptions<
			Awaited<ReturnType<typeof adminClearAll>>,
			TError,
			void,
			TContext
		>;
	},
	queryClient?: QueryClient
): CreateMutationResult<Awaited<ReturnType<typeof adminClearAll>>, TError, void, TContext> => {
	const mutationOptions = getAdminClearAllMutationOptions(options);

	return createMutation(mutationOptions, queryClient);
};
