/**
 * Generated by orval v7.4.0 🍺
 * Do not edit manually.
 * letrack-api
 * OpenAPI spec version: v1
 */
import { createQuery } from "@tanstack/svelte-query";
import type {
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	QueryFunction,
	QueryKey
} from "@tanstack/svelte-query";
import type { DTOLapDTO, InternalErrorResponse, LapsParams } from "./api.schemas";
import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType } from "../mutator/customInstance.svelte";

export const laps = (params: LapsParams) => {
	return customInstance<DTOLapDTO[]>({ url: `/laps`, method: "GET", params });
};

export const getLapsQueryKey = (params: LapsParams) => {
	return [`/laps`, ...(params ? [params] : [])] as const;
};

export const getLapsQueryOptions = <
	TData = Awaited<ReturnType<typeof laps>>,
	TError = ErrorType<InternalErrorResponse>
>(
	params: LapsParams,
	options?: { query?: Partial<CreateQueryOptions<TData, TError, TData>> }
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getLapsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof laps>>> = () => laps(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<TData, TError, TData> & {
		queryKey: DataTag<QueryKey, TData>;
	};
};

export type LapsQueryResult = NonNullable<Awaited<ReturnType<typeof laps>>>;
export type LapsQueryError = ErrorType<InternalErrorResponse>;

export function createLaps<
	TData = Awaited<ReturnType<typeof laps>>,
	TError = ErrorType<InternalErrorResponse>
>(
	params: LapsParams,
	options?: { query?: Partial<CreateQueryOptions<TData, TError, TData>> }
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getLapsQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
