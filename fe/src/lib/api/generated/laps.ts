/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * letrack-api
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	MutationFunction,
	QueryFunction,
	QueryKey
} from "@tanstack/svelte-query";

import type { DTOLapDTO, InternalErrorResponse, LapsParams, LapsValidRequest } from "./api.schemas";

import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const laps = (params: LapsParams) => {
	return customInstance<DTOLapDTO[]>({ url: `/laps`, method: "GET", params });
};

export const getLapsQueryKey = (params: LapsParams) => {
	return [`/laps`, ...(params ? [params] : [])] as const;
};

export const getLapsQueryOptions = <
	TData = Awaited<ReturnType<typeof laps>>,
	TError = ErrorType<InternalErrorResponse>
>(
	params: LapsParams,
	options?: { query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof laps>>, TError, TData>> }
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getLapsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof laps>>> = () => laps(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof laps>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type LapsQueryResult = NonNullable<Awaited<ReturnType<typeof laps>>>;
export type LapsQueryError = ErrorType<InternalErrorResponse>;

export function createLaps<
	TData = Awaited<ReturnType<typeof laps>>,
	TError = ErrorType<InternalErrorResponse>
>(
	params: LapsParams,
	options?: { query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof laps>>, TError, TData>> }
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getLapsQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const lapsValid = (lapsValidRequest: BodyType<LapsValidRequest>) => {
	return customInstance<boolean>({
		url: `/laps/valid`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: lapsValidRequest
	});
};

export const getLapsValidMutationOptions = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof lapsValid>>,
		TError,
		{ data: BodyType<LapsValidRequest> },
		TContext
	>;
}): CreateMutationOptions<
	Awaited<ReturnType<typeof lapsValid>>,
	TError,
	{ data: BodyType<LapsValidRequest> },
	TContext
> => {
	const mutationKey = ["lapsValid"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof lapsValid>>,
		{ data: BodyType<LapsValidRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return lapsValid(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type LapsValidMutationResult = NonNullable<Awaited<ReturnType<typeof lapsValid>>>;
export type LapsValidMutationBody = BodyType<LapsValidRequest>;
export type LapsValidMutationError = ErrorType<InternalErrorResponse>;

export const createLapsValid = <
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		Awaited<ReturnType<typeof lapsValid>>,
		TError,
		{ data: BodyType<LapsValidRequest> },
		TContext
	>;
}): CreateMutationResult<
	Awaited<ReturnType<typeof lapsValid>>,
	TError,
	{ data: BodyType<LapsValidRequest> },
	TContext
> => {
	const mutationOptions = getLapsValidMutationOptions(options);

	return createMutation(mutationOptions);
};
