/**
 * Generated by orval v7.4.0 üç∫
 * Do not edit manually.
 * letrack-api
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	MutationFunction,
	QueryFunction,
	QueryKey
} from "@tanstack/svelte-query";
import type {
	EntitiesPlayer,
	InternalErrorResponse,
	PlayersInsertRequest,
	PlayersUpdateRequest
} from "./api.schemas";
import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const playersUpdate = (playersUpdateRequest: BodyType<PlayersUpdateRequest>) => {
	return customInstance<EntitiesPlayer>({
		url: `/players`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: playersUpdateRequest
	});
};

export const getPlayersUpdateMutationOptions = <
	TData = Awaited<ReturnType<typeof playersUpdate>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		TData,
		TError,
		{ data: BodyType<PlayersUpdateRequest> },
		TContext
	>;
}) => {
	const mutationKey = ["playersUpdate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof playersUpdate>>,
		{ data: BodyType<PlayersUpdateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return playersUpdate(data);
	};

	return { mutationFn, ...mutationOptions } as CreateMutationOptions<
		TData,
		TError,
		{ data: BodyType<PlayersUpdateRequest> },
		TContext
	>;
};

export type PlayersUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof playersUpdate>>>;
export type PlayersUpdateMutationBody = BodyType<PlayersUpdateRequest>;
export type PlayersUpdateMutationError = ErrorType<InternalErrorResponse>;

export const createPlayersUpdate = <
	TData = Awaited<ReturnType<typeof playersUpdate>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		TData,
		TError,
		{ data: BodyType<PlayersUpdateRequest> },
		TContext
	>;
}): CreateMutationResult<TData, TError, { data: BodyType<PlayersUpdateRequest> }, TContext> => {
	const mutationOptions = getPlayersUpdateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const playersList = () => {
	return customInstance<EntitiesPlayer[]>({ url: `/players`, method: "GET" });
};

export const getPlayersListQueryKey = () => {
	return [`/players`] as const;
};

export const getPlayersListQueryOptions = <
	TData = Awaited<ReturnType<typeof playersList>>,
	TError = ErrorType<InternalErrorResponse>
>(options?: {
	query?: Partial<CreateQueryOptions<TData, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getPlayersListQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof playersList>>> = () => playersList();

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<TData, TError, TData> & {
		queryKey: DataTag<QueryKey, TData>;
	};
};

export type PlayersListQueryResult = NonNullable<Awaited<ReturnType<typeof playersList>>>;
export type PlayersListQueryError = ErrorType<InternalErrorResponse>;

export function createPlayersList<
	TData = Awaited<ReturnType<typeof playersList>>,
	TError = ErrorType<InternalErrorResponse>
>(options?: {
	query?: Partial<CreateQueryOptions<TData, TError, TData>>;
}): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
	const queryOptions = getPlayersListQueryOptions(options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const playersInsert = (playersInsertRequest: BodyType<PlayersInsertRequest>) => {
	return customInstance<EntitiesPlayer>({
		url: `/players`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: playersInsertRequest
	});
};

export const getPlayersInsertMutationOptions = <
	TData = Awaited<ReturnType<typeof playersInsert>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		TData,
		TError,
		{ data: BodyType<PlayersInsertRequest> },
		TContext
	>;
}) => {
	const mutationKey = ["playersInsert"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof playersInsert>>,
		{ data: BodyType<PlayersInsertRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return playersInsert(data);
	};

	return { mutationFn, ...mutationOptions } as CreateMutationOptions<
		TData,
		TError,
		{ data: BodyType<PlayersInsertRequest> },
		TContext
	>;
};

export type PlayersInsertMutationResult = NonNullable<Awaited<ReturnType<typeof playersInsert>>>;
export type PlayersInsertMutationBody = BodyType<PlayersInsertRequest>;
export type PlayersInsertMutationError = ErrorType<InternalErrorResponse>;

export const createPlayersInsert = <
	TData = Awaited<ReturnType<typeof playersInsert>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<
		TData,
		TError,
		{ data: BodyType<PlayersInsertRequest> },
		TContext
	>;
}): CreateMutationResult<TData, TError, { data: BodyType<PlayersInsertRequest> }, TContext> => {
	const mutationOptions = getPlayersInsertMutationOptions(options);

	return createMutation(mutationOptions);
};
export const playersDelete = (id: number) => {
	return customInstance<void>({ url: `/players/${id}`, method: "DELETE" });
};

export const getPlayersDeleteMutationOptions = <
	TData = Awaited<ReturnType<typeof playersDelete>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { id: number }, TContext>;
}) => {
	const mutationKey = ["playersDelete"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof playersDelete>>, { id: number }> = (
		props
	) => {
		const { id } = props ?? {};

		return playersDelete(id);
	};

	return { mutationFn, ...mutationOptions } as CreateMutationOptions<
		TData,
		TError,
		{ id: number },
		TContext
	>;
};

export type PlayersDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof playersDelete>>>;

export type PlayersDeleteMutationError = ErrorType<InternalErrorResponse>;

export const createPlayersDelete = <
	TData = Awaited<ReturnType<typeof playersDelete>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { id: number }, TContext>;
}): CreateMutationResult<TData, TError, { id: number }, TContext> => {
	const mutationOptions = getPlayersDeleteMutationOptions(options);

	return createMutation(mutationOptions);
};
