/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * letrack-api
 * OpenAPI spec version: v1
 */
import { createMutation, createQuery } from "@tanstack/svelte-query";
import type {
	CreateMutationOptions,
	CreateMutationResult,
	CreateQueryOptions,
	CreateQueryResult,
	DataTag,
	MutationFunction,
	QueryFunction,
	QueryKey
} from "@tanstack/svelte-query";
import type {
	EntitiesRace,
	InternalErrorResponse,
	ModelsPaginatedListOfRace,
	RaceInsertRequest,
	RaceListParams,
	RaceStartRequest,
	RaceStopRequest,
	RaceSummaryResponse,
	RaceUpdateRequest
} from "./api.schemas";
import { customInstance } from "../mutator/customInstance.svelte";
import type { ErrorType, BodyType } from "../mutator/customInstance.svelte";

export const raceUpdate = (raceUpdateRequest: BodyType<RaceUpdateRequest>) => {
	return customInstance<EntitiesRace>({
		url: `/race`,
		method: "PUT",
		headers: { "Content-Type": "application/json" },
		data: raceUpdateRequest
	});
};

export const getRaceUpdateMutationOptions = <
	TData = Awaited<ReturnType<typeof raceUpdate>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { data: BodyType<RaceUpdateRequest> }, TContext>;
}) => {
	const mutationKey = ["raceUpdate"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof raceUpdate>>,
		{ data: BodyType<RaceUpdateRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return raceUpdate(data);
	};

	return { mutationFn, ...mutationOptions } as CreateMutationOptions<
		TData,
		TError,
		{ data: BodyType<RaceUpdateRequest> },
		TContext
	>;
};

export type RaceUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof raceUpdate>>>;
export type RaceUpdateMutationBody = BodyType<RaceUpdateRequest>;
export type RaceUpdateMutationError = ErrorType<InternalErrorResponse>;

export const createRaceUpdate = <
	TData = Awaited<ReturnType<typeof raceUpdate>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { data: BodyType<RaceUpdateRequest> }, TContext>;
}): CreateMutationResult<TData, TError, { data: BodyType<RaceUpdateRequest> }, TContext> => {
	const mutationOptions = getRaceUpdateMutationOptions(options);

	return createMutation(mutationOptions);
};
export const raceList = (params?: RaceListParams) => {
	return customInstance<ModelsPaginatedListOfRace>({ url: `/race`, method: "GET", params });
};

export const getRaceListQueryKey = (params?: RaceListParams) => {
	return [`/race`, ...(params ? [params] : [])] as const;
};

export const getRaceListQueryOptions = <
	TData = Awaited<ReturnType<typeof raceList>>,
	TError = ErrorType<InternalErrorResponse>
>(
	params?: RaceListParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof raceList>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getRaceListQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof raceList>>> = () => raceList(params);

	return { queryKey, queryFn, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof raceList>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RaceListQueryResult = NonNullable<Awaited<ReturnType<typeof raceList>>>;
export type RaceListQueryError = ErrorType<InternalErrorResponse>;

export function createRaceList<
	TData = Awaited<ReturnType<typeof raceList>>,
	TError = ErrorType<InternalErrorResponse>
>(
	params?: RaceListParams,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof raceList>>, TError, TData>>;
	}
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getRaceListQueryOptions(params, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const raceInsert = (raceInsertRequest: BodyType<RaceInsertRequest>) => {
	return customInstance<EntitiesRace>({
		url: `/race`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: raceInsertRequest
	});
};

export const getRaceInsertMutationOptions = <
	TData = Awaited<ReturnType<typeof raceInsert>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { data: BodyType<RaceInsertRequest> }, TContext>;
}) => {
	const mutationKey = ["raceInsert"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof raceInsert>>,
		{ data: BodyType<RaceInsertRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return raceInsert(data);
	};

	return { mutationFn, ...mutationOptions } as CreateMutationOptions<
		TData,
		TError,
		{ data: BodyType<RaceInsertRequest> },
		TContext
	>;
};

export type RaceInsertMutationResult = NonNullable<Awaited<ReturnType<typeof raceInsert>>>;
export type RaceInsertMutationBody = BodyType<RaceInsertRequest>;
export type RaceInsertMutationError = ErrorType<InternalErrorResponse>;

export const createRaceInsert = <
	TData = Awaited<ReturnType<typeof raceInsert>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { data: BodyType<RaceInsertRequest> }, TContext>;
}): CreateMutationResult<TData, TError, { data: BodyType<RaceInsertRequest> }, TContext> => {
	const mutationOptions = getRaceInsertMutationOptions(options);

	return createMutation(mutationOptions);
};
export const raceSummary = (raceId: number) => {
	return customInstance<RaceSummaryResponse>({ url: `/race/summary/${raceId}`, method: "GET" });
};

export const getRaceSummaryQueryKey = (raceId: number) => {
	return [`/race/summary/${raceId}`] as const;
};

export const getRaceSummaryQueryOptions = <
	TData = Awaited<ReturnType<typeof raceSummary>>,
	TError = ErrorType<InternalErrorResponse>
>(
	raceId: number,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof raceSummary>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getRaceSummaryQueryKey(raceId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof raceSummary>>> = () => raceSummary(raceId);

	return { queryKey, queryFn, enabled: !!raceId, ...queryOptions } as CreateQueryOptions<
		Awaited<ReturnType<typeof raceSummary>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RaceSummaryQueryResult = NonNullable<Awaited<ReturnType<typeof raceSummary>>>;
export type RaceSummaryQueryError = ErrorType<InternalErrorResponse>;

export function createRaceSummary<
	TData = Awaited<ReturnType<typeof raceSummary>>,
	TError = ErrorType<InternalErrorResponse>
>(
	raceId: number,
	options?: {
		query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof raceSummary>>, TError, TData>>;
	}
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getRaceSummaryQueryOptions(raceId, options);

	const query = createQuery(queryOptions) as CreateQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const raceStop = (raceStopRequest: BodyType<RaceStopRequest>) => {
	return customInstance<EntitiesRace>({
		url: `/race/stop`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: raceStopRequest
	});
};

export const getRaceStopMutationOptions = <
	TData = Awaited<ReturnType<typeof raceStop>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { data: BodyType<RaceStopRequest> }, TContext>;
}) => {
	const mutationKey = ["raceStop"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof raceStop>>,
		{ data: BodyType<RaceStopRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return raceStop(data);
	};

	return { mutationFn, ...mutationOptions } as CreateMutationOptions<
		TData,
		TError,
		{ data: BodyType<RaceStopRequest> },
		TContext
	>;
};

export type RaceStopMutationResult = NonNullable<Awaited<ReturnType<typeof raceStop>>>;
export type RaceStopMutationBody = BodyType<RaceStopRequest>;
export type RaceStopMutationError = ErrorType<InternalErrorResponse>;

export const createRaceStop = <
	TData = Awaited<ReturnType<typeof raceStop>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { data: BodyType<RaceStopRequest> }, TContext>;
}): CreateMutationResult<TData, TError, { data: BodyType<RaceStopRequest> }, TContext> => {
	const mutationOptions = getRaceStopMutationOptions(options);

	return createMutation(mutationOptions);
};
export const raceStart = (raceStartRequest: BodyType<RaceStartRequest>) => {
	return customInstance<EntitiesRace>({
		url: `/race/start`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: raceStartRequest
	});
};

export const getRaceStartMutationOptions = <
	TData = Awaited<ReturnType<typeof raceStart>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { data: BodyType<RaceStartRequest> }, TContext>;
}) => {
	const mutationKey = ["raceStart"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof raceStart>>,
		{ data: BodyType<RaceStartRequest> }
	> = (props) => {
		const { data } = props ?? {};

		return raceStart(data);
	};

	return { mutationFn, ...mutationOptions } as CreateMutationOptions<
		TData,
		TError,
		{ data: BodyType<RaceStartRequest> },
		TContext
	>;
};

export type RaceStartMutationResult = NonNullable<Awaited<ReturnType<typeof raceStart>>>;
export type RaceStartMutationBody = BodyType<RaceStartRequest>;
export type RaceStartMutationError = ErrorType<InternalErrorResponse>;

export const createRaceStart = <
	TData = Awaited<ReturnType<typeof raceStart>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { data: BodyType<RaceStartRequest> }, TContext>;
}): CreateMutationResult<TData, TError, { data: BodyType<RaceStartRequest> }, TContext> => {
	const mutationOptions = getRaceStartMutationOptions(options);

	return createMutation(mutationOptions);
};
export const raceDelete = (id: number) => {
	return customInstance<void>({ url: `/race/${id}`, method: "DELETE" });
};

export const getRaceDeleteMutationOptions = <
	TData = Awaited<ReturnType<typeof raceDelete>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { id: number }, TContext>;
}) => {
	const mutationKey = ["raceDelete"];
	const { mutation: mutationOptions } = options
		? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof raceDelete>>, { id: number }> = (
		props
	) => {
		const { id } = props ?? {};

		return raceDelete(id);
	};

	return { mutationFn, ...mutationOptions } as CreateMutationOptions<
		TData,
		TError,
		{ id: number },
		TContext
	>;
};

export type RaceDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof raceDelete>>>;

export type RaceDeleteMutationError = ErrorType<InternalErrorResponse>;

export const createRaceDelete = <
	TData = Awaited<ReturnType<typeof raceDelete>>,
	TError = ErrorType<InternalErrorResponse>,
	TContext = unknown
>(options?: {
	mutation?: CreateMutationOptions<TData, TError, { id: number }, TContext>;
}): CreateMutationResult<TData, TError, { id: number }, TContext> => {
	const mutationOptions = getRaceDeleteMutationOptions(options);

	return createMutation(mutationOptions);
};
